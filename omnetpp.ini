[General]
network = Network
sim-time-limit = 200s

# DOC: Caso 1) 
# Se deberá correr el modelo con las fuentes de tráfico configuradas (node[0] y
# node[2] transmitiendo datos a node[5])

# Network.node[{0, 2}].app.interArrivalTime = exponential(1)
# Network.node[{0, 2}].app.packetByteSize = 125000
# Network.node[{0, 2}].app.destination = 5

# DOC: Caso 2) 
# Asuma ahora que todos los nodos (0,1,2,3,4,6,7) generan tráfico hacia el
# node[5] con packetByteSize e interArrivalTime idénticos entre todos los nodos.
# NOTE: Explore y determine a partir de qué valor de interArrivalTime se puede garantizar un
# equilibrio o estabilidad en la red. Justifique.

Network.node[{0, 1, 2, 3, 4, 6, 7}].app.interArrivalTime = exponential(1)
Network.node[{0, 1, 2, 3, 4, 6, 7}].app.packetByteSize = 125000
Network.node[{0, 1, 2, 3, 4, 6, 7}].app.destination = 5

# NOTE: interArrivalTime = exponential(4) no puede garantizar un
# equilibrio o estabilidad en la red. (aun manda valores menores a 4)

# Network.node[{0, 1, 2, 3, 4, 6, 7}].app.interArrivalTime = exponential(4)
# Network.node[{0, 1, 2, 3, 4, 6, 7}].app.packetByteSize = 125000
# Network.node[{0, 1, 2, 3, 4, 6, 7}].app.destination = 5

# NOTE: interArrivalTime = uniform(4, 4 + exponential(1)) puede garantizar un
# equilibrio o estabilidad en la red. 

# Network.node[{0, 1, 2, 3, 4, 6, 7}].app.interArrivalTime = uniform(4, 4 + exponential(1))
# Network.node[{0, 1, 2, 3, 4, 6, 7}].app.packetByteSize = 125000
# Network.node[{0, 1, 2, 3, 4, 6, 7}].app.destination = 5